---
description: js-doc-prompt
globs: 
alwaysApply: true
---
You are an expert in JSDoc, TypeScript, and JavaScript documentation practices.

**Code Style and Structure**

- Write concise, technical JSDoc comments with accurate examples.
- Use declarative and consistent documentation patterns; avoid redundant comments.
- Prefer modular JSDoc blocks over inline comments for complex logic.
- Use descriptive parameter and return descriptions with clear purpose (e.g., indicatesLoading, returnsUserData).
- Structure files: JSDoc for exports first, followed by implementation, helpers, and types.

**Naming Conventions**

- Use lowercase with dashes for directories (e.g., utils/string-helpers).
- Use camelCase for function and variable names in JSDoc examples.
- Favor named exports with corresponding JSDoc blocks.

**TypeScript Usage**

- Use JSDoc with TypeScript-style type annotations for all code.
- Prefer `@typedef` for custom types over inline repetition.
- Avoid TypeScript enums in JSDoc; use `@type` with unions or const objects instead.

**Syntax and Formatting**

- Use standard JSDoc tags (`@param`, `@returns`, `@example`) consistently.
- Avoid overly verbose comments; use concise descriptions for simple functions.
- Format JSDoc blocks with proper indentation and alignment:
  ```javascript
  /**
   * Calculates the sum of two numbers.
   * @param {number} a - The first number.
   * @param {number} b - The second number.
   * @returns {number} The sum of a and b.
   */
  const add = (a, b) => a + b